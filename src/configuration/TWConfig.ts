import type { TWThingTransformer } from '../transformer/ThingTransformer';

/**
 * An interface that describes the `methodHelpers` property in twconfig.json.
 */
export interface MethodHelpers {
    /**
     * Generates a `METHOD_NAME` constant with the name of the service or subscription.
     */
    methodName?: boolean;

    /**
     * Generates a `CLASS_NAME` constant with the name of the class this function is declared in.
     */
    className?: boolean;

    /**
     * Generates a `FILE_PATH` constant with the relative path of the file.
     */
    filePath?: boolean;

    /**
     * Generates a `LOG_PREFIX` constant with the name of the service.
     * Example: `${me.name}::${METHOD_NAME}::`
     */
    logPrefix?: string;
}

/**
 * An interface that describes the `inlineSQL` property in twconfig.json.
 */
export interface InlineSQL {

    /**
     * When set to `true`, inline SQL statements are permitted in javascript services and will be extracted
     * into SQL services.
     */
    enabled?: boolean;

    /**
     * Controls what permissions are assigned to the services generated from the inline SQL statements.
     * The following values may be used:
     *  - `"none"`: Default if omitted. The SQL services will not have any permissions assigned to them.
     *  - `"inherit"`: When used, the SQL services will have the same permissions as the service they are created from.
     *  - `"system"`: When used, the SQL services will have the `ServiceInvoke` permission allowed for the `System` user.
     */
    permissions?: 'none' | 'inherit' | 'system';
}

/**
 * An interface that describes the `superCalls` property in twconfig.json.
 */
export interface SuperCallOptions {

    /**
     * Controls what permissions are assigned to the services generated from the super calls.
     * The following values may be used:
     *  - `"none"`: Default if omitted. The superclass services will not have any permissions assigned to them.
     *  - `"inherit"`: When used, the superclass services will have the same permissions as the service they are created from.
     *  - `"system"`: When used, the superclass services will have the `ServiceInvoke` permission allowed for the `System` user.
     */
    permissions?: 'none' | 'inherit' | 'system';
}

/**
 * The interface for the `twconfig.json` file that contains options
 * specific to a thingworx project.
 */
export interface TWConfig {

    /**
     * The name of the thingworx project to assign to the entities that will be
     * generated.
     * 
     * A value of `"@auto"` will indicate that there are multiple projects present
     * and the transformer should derive the project name from the path.
     */
    projectName: string;

    /**
     * If set to `true`, a project entity will be created and included in the extension.
     */
    generateProjectEntity?: boolean;

    /**
     * A flag that, when enabled, will cause the transformer to emit additional collection
     * declarations for any thing template or thing shape with a number of dummy things
     * that implement them.
     * 
     * This makes it possible to use a `THINGNAME` type with that template or shape restriction
     * that doesn't evaluate to `never`.
     */
    generateThingInstances?: boolean;

    /**
     * A flag that, when enabled, will cause any dependencies specified in `twconfig.json` to be
     * specified as dependencies on the project entity.
     * 
     * This requires enabling the `generateProjectEntity` flag.
     */
    includeProjectDependencies?: boolean;

    /**
     * A flag that, when enabled, will cause the transformer to automatically assign ordinal values
     * to data shape fields when they aren't explicitly provided.
     */
    autoGenerateDataShapeOrdinals?: boolean;

    /**
     * If specified, the path to each project's repository folder. Used to upload files to the repository.
     */
    repositoryPath?: string;

    /**
     * Configuration for the generation of method helpers that can be used used within services and subscriptions.
     */
    methodHelpers?: MethodHelpers;

    /**
     * When enabled, global function declarations are permitted and any service that references a global function will
     * gain a copy of it.
     */
    globalFunctions?: boolean;

    /**
     * When enabled, inline SQL queries and commands will be allowed and extracted into services.
     */
    inlineSQL?: InlineSQL;

    /**
     * Controls how permissions are generated for services created from superclass calls.
     */
    superCalls?: SuperCallOptions;

    /**
     * The minimum thingworx version on which the project may be installed.
     */
    minimumThingWorxVersion?: string;

    /**
     * An array of project names that the thingworx project depends on. The declarations of entities
     * included in these projects can be retrieved via the `install` task.
     */
    projectDependencies?: string[];

    /**
     * An array of entity names that the thingworx project depends on. The declarations of these entities
     * and their dependencies be retrieved via the `install` task.
     */
    entityDependencies?: `${string}/${string}`[];

    /**
     * An array of extension package names that the thingworx project depends on. The declarations of entities
     * included in these extensions can be retrieved via the `install` task.
     */
    extensionDependencies?: string[];

    /**
     * A flag that, when enabled, will allow the use of global code.
     * Support for this feature is experimental and is likely to break in
     * future versions of thingworx.
     */
    experimentalGlobals?: boolean;

    /**
     * A flag that, when enabled, will cause a debug build to be generated.
     */
    debug?: boolean;

    /**
     * A flag that, when enabled, will cause a trace build to be generated.
     */
    trace?: boolean;

    /**
     * When enabled, any xml files in the source folder will be copied to the build output.
     */
    copyEntities?: boolean;

    /**
     * If specified, a dictionary of node modules to use as UI plugins. The modules must have
     * a constructable default export that conforms to the `UIPlugin` interface defined in thing transformer.
     */
    UIPlugins: Record<string, string>;

    /**
     * An optional callback that is invoked before the transformer begins processing
     * a file.
     * @param name The name of the file that will be processed.
     */
    transformerWillStartFile?(name: string): void;

    /**
     * An optional callback that is invoked after the transformer has finished processing
     * a file.
     * @param name The name of the file that has been processed.
     */
    transformerDidFinishFile?(name: string): void;

    /**
     * An object holding transformer instances and global metadata.
     */
    store: {
        [key: string]: TWThingTransformer;
    };
}