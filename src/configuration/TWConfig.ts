import type { TWThingTransformer } from '../transformer/ThingTransformer';

/**
 * The interface for the `twconfig.json` file that contains options
 * specific to a thingworx project.
 */
export interface TWConfig {

    /**
     * The name of the thingworx project to assign to the entities that will be
     * generated.
     * 
     * A value of `"@auto"` will indicate that there are multiple projects present
     * and the transformer should derive the project name from the path.
     */
    projectName: string;

    /**
     * If set to `true`, a project entity will be created and included in the extension.
     */
    generateProjectEntity?: boolean;

    /**
     * A flag that, when enabled, will cause the transformer to emit additional collection
     * declarations for any thing template or thing shape with a number of dummy things
     * that implement them.
     * 
     * This makes it possible to use a `THINGNAME` type with that template or shape restriction
     * that doesn't evaluate to `never`.
     */
    generateThingInstances?: boolean;

    /**
     * A flag that, when enabled, will cause any dependencies specified in `twconfig.json` to be
     * specified as dependencies on the project entity.
     * 
     * This requires enabling the `generateProjectEntity` flag.
     */
    includeProjectDependencies?: boolean;

    /**
     * A flag that, when enabled, will cause the transformer to automatically assign ordinal values
     * to data shape fields when they aren't explicitly provided.
     */
    autoGenerateDataShapeOrdinals?: boolean;

    /**
     * The minimum thingworx version on which the project may be installed.
     */
    minimumThingWorxVersion?: string;

    /**
     * An array of project names that the thingworx project depends on. The declarations of entities
     * included in these projects can be retrieved via the `install` task.
     */
    projectDependencies?: string[];

    /**
     * An array of entity names that the thingworx project depends on. The declarations of these entities
     * and their dependencies be retrieved via the `install` task.
     */
    entityDependencies?: `${string}/${string}`[];

    /**
     * An array of extension package names that the thingworx project depends on. The declarations of entities
     * included in these extensions can be retrieved via the `install` task.
     */
    extensionDependencies?: string[];

    /**
     * A flag that, when enabled, will allow the use of global code.
     * Support for this feature is experimental and is likely to break in
     * future versions of thingworx.
     */
    experimentalGlobals?: boolean;

    /**
     * A flag that, when enabled, will cause a debug build to be generated.
     */
    debug?: boolean;

    /**
     * An object holding transformer instances.
     */
    store: {[key: string]: TWThingTransformer};
}