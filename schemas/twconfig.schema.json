{
    "$schema": "https://json-schema.org/draft-07/schema",
    "title": "TWConfig",
    "description": "The schema of the twconfig.json file that contains various build options for ThingWorx TypeScript projects.",
    "markdownDescription": "The schema of the twconfig.json file that contains various build options for ThingWorx TypeScript projects.",
    "type": "object",
    "properties": {
        "$schema": {
            "type": "string",
            "description": "The schema this JSON file must conform to.",
            "markdownDescription": "The schema this JSON file must conform to."
        },
        "projectName": {
            "type": "string",
            "description": "The name of the thingworx project to assign to the entities that will be generated.\nA value of `\"@auto\"` will indicate that there are multiple projects present and the transformer should derive the project name from the path.",
            "markdownDescription": "The name of the thingworx project to assign to the entities that will be generated.\nA value of `\"@auto\"` will indicate that there are multiple projects present and the transformer should derive the project name from the path."
        },
        "generateProjectEntity": {
            "type": "boolean",
            "description": "If set to `true`, a project entity will be created and included in the extension.",
            "markdownDescription": "If set to `true`, a project entity will be created and included in the extension."
        },
        "generateThingInstances": {
            "type": "boolean",
            "description": "A flag that, when enabled, will cause the transformer to emit additional collection declarations for any thing template or thing shape with a number of dummy things that implement them.\nThis makes it possible to use a `THINGNAME` type with that template or shape restriction that doesn't evaluate to `never`.",
            "markdownDescription": "A flag that, when enabled, will cause the transformer to emit additional collection declarations for any thing template or thing shape with a number of dummy things that implement them.\nThis makes it possible to use a `THINGNAME` type with that template or shape restriction that doesn't evaluate to `never`."
        },
        "includeProjectDependencies": {
            "type": "boolean",
            "description": "A flag that, when enabled, will cause any dependencies specified in `twconfig.json` to be specified as dependencies on the project entity.\nThis requires enabling the `generateProjectEntity` flag.",
            "markdownDescription": "A flag that, when enabled, will cause any dependencies specified in `twconfig.json` to be specified as dependencies on the project entity.\nThis requires enabling the `generateProjectEntity` flag."
        },
        "autoGenerateDataShapeOrdinals": {
            "type": "boolean",
            "description": "A flag that, when enabled, will cause the transformer to automatically assign ordinal values to data shape fields when they aren't explicitly provided.",
            "markdownDescription": "A flag that, when enabled, will cause the transformer to automatically assign ordinal values to data shape fields when they aren't explicitly provided."
        },
        "methodHelpers": {
            "type": "object",
            "description": "Configuration for the generation of method helpers that can be used used within services and subscriptions.",
            "markdownDescription": "Configuration for the generation of method helpers that can be used used within services and subscriptions.",
            "properties": {
                "methodName": {
                    "type": "boolean",
                    "description": "Generates a `METHOD_NAME` constant with the name of the service or subscription.",
                    "markdownDescription": "Generates a `METHOD_NAME` constant with the name of the service or subscription."
                },
                "className": {
                    "type": "boolean",
                    "description": "Generates a `CLASS_NAME` constant with the name of the class this function is declared in.",
                    "markdownDescription": "Generates a `CLASS_NAME` constant with the name of the class this function is declared in."
                },
                "filePath": {
                    "type": "boolean",
                    "description": "Generates a `FILE_PATH` constant with the relative path of the file.",
                    "markdownDescription": "Generates a `FILE_PATH` constant with the relative path of the file."
                },
                "logPrefix": {
                    "type": "string",
                    "description": "Generates a `LOG_PREFIX` constant with the name of the service. Example: `${me.name}::${METHOD_NAME}::",
                    "markdownDescription": "Generates a `LOG_PREFIX` constant with the name of the service. Example: `${me.name}::${METHOD_NAME}::`"
                }
            }
        },
        "globalFunctions": {
            "type": "boolean",
            "description": "When enabled, global function declarations are permitted and any service that references a global function will gain a copy of it.",
            "markdownDescription": "When enabled, global function declarations are permitted and any service that references a global function will gain a copy of it."
        },
        "inlineSQL": {
            "type": "boolean",
            "description": "When enabled, inline SQL queries and commands will be allowed and extracted into services.",
            "markdownDescription": "When enabled, inline SQL queries and commands will be allowed and extracted into services."
        },
        "minimumThingWorxVersion": {
            "type": "string",
            "description": "The minimum thingworx version on which the project may be installed.",
            "markdownDescription": "The minimum thingworx version on which the project may be installed."
        },
        "projectDependencies": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "uniqueItems": true,
            "description": "An array of project names that the thingworx project depends on. The declarations of entities included in these projects can be retrieved via the `install` task.",
            "markdownDescription": "An array of project names that the thingworx project depends on. The declarations of entities included in these projects can be retrieved via the `install` task."
        },
        "entityDependencies": {
            "type": "array",
            "items": {
                "type": "string",
                "pattern": "^.*?/.*?$"
            },
            "uniqueItems": true,
            "description": "An array of project names that the thingworx project depends on. The declarations of entities included in these projects can be retrieved via the `install` task.",
            "markdownDescription": "An array of project names that the thingworx project depends on. The declarations of entities included in these projects can be retrieved via the `install` task."
        },
        "extensionDependencies": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "uniqueItems": true,
            "description": "An array of extension package names that the thingworx project depends on. The declarations of entities included in these extensions can be retrieved via the `install` task.",
            "markdownDescription": "An array of extension package names that the thingworx project depends on. The declarations of entities included in these extensions can be retrieved via the `install` task."
        },
        "experimentalGlobals": {
            "type": "boolean",
            "description": "A flag that, when enabled, will allow the use of global code. Support for this feature is experimental and is likely to break in future versions of thingworx.",
            "markdownDescription": "A flag that, when enabled, will allow the use of global code. Support for this feature is experimental and is likely to break in future versions of thingworx."
        }
    },
    "required": ["projectName"]
}